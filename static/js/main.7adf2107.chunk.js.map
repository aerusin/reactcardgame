{"version":3,"sources":["utilities/data.ts","components/DisplayCard.tsx","interfaces/card.ts","components/CardKindSelector.tsx","components/ControlPanel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getRandomElement","items","Math","floor","random","length","DisplayCard","card","setCard","cardKind","useState","searchText","setSearchText","Col","Body","Text","question","Form","Group","controlId","Label","Control","as","value","onKeyPress","event","console","log","kind","target","studentAnswer","key","hint","alert","CARDS","filter","onChange","e","CardKind","CardKindSelector","setCardKind","radios","name","Addition","Subtraction","Multiplication","Division","ButtonGroup","map","radio","idx","ToggleButton","id","type","variant","checked","currentTarget","ControlPanel","Button","onClick","App","activeCard","setActiveCard","Container","className","Row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7adf2107.chunk.js","sourcesContent":[" export function getRandomElement<T>(items: T[]): T {\r\n    return items[Math.floor(Math.random()*items.length)];\r\n}","import { Col, Card as BootstrapCard, InputGroup, FormControl, Form, Button } from 'react-bootstrap';\r\nimport { Card, CardKind} from '../interfaces/card'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { useState } from 'react';\r\nimport { isConstructorDeclaration, isGetAccessor } from 'typescript';\r\nimport { getRandomElement } from '../utilities/data';\r\nimport CARDS from '../assets/cards.json'\r\nimport { clear } from 'console';\r\n\r\n\r\n\r\nexport function DisplayCard({card, setCard, cardKind}: {card: Card, setCard: (c: Card)=>void, cardKind: CardKind}): JSX.Element {\r\n    const [searchText, setSearchText] = useState(\"\")\r\n    function handleKeyPress(event: React.KeyboardEvent) {\r\n        console.log(card.kind)\r\n        console.log(cardKind)\r\n        console.log((event.target as HTMLInputElement).value);\r\n        let studentAnswer = (event.target as HTMLInputElement).value;\r\n        if(event.key === 'Enter'){\r\n            if(studentAnswer === card.hint){\r\n                alert(\"Correct!\");\r\n                setCard(getRandomElement((CARDS as Card[]).filter((card: Card) => card.kind === cardKind)))\r\n                setSearchText(\"\");\r\n            }else{\r\n                alert(\"Incorrect, Try Again!\")\r\n                setSearchText(\"\")\r\n            }\r\n        }\r\n    }\r\n    return <Col>\r\n    <BootstrapCard>\r\n        <BootstrapCard.Body>\r\n            <BootstrapCard.Text>\r\n                <strong>Math Problem</strong>:\r\n                <div> {card.question}\r\n                </div> \r\n            <Form.Group controlId=\"answer-entry\">\r\n            <Form.Label><strong>Enter Correct Answer:</strong></Form.Label>\r\n            <Form.Control as=\"input\" value = {searchText} onKeyPress = {handleKeyPress}\r\n                onChange = {(e) => setSearchText(e.target.value)}/>\r\n            </Form.Group>\r\n            </BootstrapCard.Text>\r\n        </BootstrapCard.Body>\r\n    </BootstrapCard>\r\n    </Col>\r\n}","\r\n\r\nexport enum CardKind {\r\n    Addition = \"Addition Problems\",\r\n    Subtraction = \"Subtraction Problems\",\r\n    Multiplication = \"Multiplication Problems\",\r\n    Division = \"Division Problems\"\r\n}\r\n\r\nexport interface Card {\r\n    ID: number;\r\n    kind: CardKind;\r\n    question: string;\r\n    hint: string;\r\n}\r\n","import { useState } from 'react';\r\nimport { Button, ButtonGroup, Col, ToggleButton } from 'react-bootstrap';\r\nimport { CardKind } from '../interfaces/card';\r\n\r\nexport function CardKindSelector({cardKind, setCardKind}: {cardKind: CardKind, setCardKind: (c: CardKind)=>void}): JSX.Element {\r\n  const [checked, setChecked] = useState(false);\r\n  const [radioValue, setRadioValue] = useState('1');\r\n  const radios = [\r\n      { name: '+', value: CardKind.Addition },\r\n      { name: '-', value: CardKind.Subtraction },\r\n      { name: 'x', value: CardKind.Multiplication },\r\n      { name: 'รท', value: CardKind.Division }\r\n    ];\r\n    return (\r\n    <ButtonGroup>\r\n        {radios.map((radio, idx) => (\r\n         <ToggleButton\r\n          key={idx}\r\n          id={`radio-${idx}`}\r\n          type=\"radio\"\r\n          variant=\"secondary\"\r\n          name=\"radio\"\r\n          value={radio.value}\r\n          checked={cardKind === radio.value}\r\n          onChange={(e) => setCardKind((e.currentTarget.value) as CardKind)}\r\n          >\r\n          {radio.name}\r\n        </ToggleButton>\r\n      ))}\r\n    </ButtonGroup>)\r\n    console.log(cardKind)\r\n}","import { Button, Col } from 'react-bootstrap';\r\nimport { Card, CardKind } from '../interfaces/card';\r\nimport CARDS from '../assets/cards.json'\r\nimport { getRandomElement } from '../utilities/data';\r\nimport { CardKindSelector } from './CardKindSelector';\r\n\r\nexport function ControlPanel({setCard, cardKind, setCardKind}: {setCard: (c: Card)=>void, cardKind: CardKind, setCardKind: (c: CardKind)=>void}): JSX.Element {\r\n    \r\n    function setRandomCard() {\r\n        setCard(getRandomElement(CARDS as Card[]))\r\n    }\r\n    function cardChange() {\r\n        setCard(getRandomElement((CARDS as Card[]).filter((card: Card) => card.kind === cardKind)))\r\n    }\r\n    function setCardAdd(){\r\n        setCard(getRandomElement((CARDS as Card[]).filter((card: Card) => card.kind === \"Addition Problems\")))\r\n    }\r\n    function setCardSub(){\r\n        setCard(getRandomElement((CARDS as Card[]).filter((card: Card) => card.kind === \"Subtraction Problems\")))\r\n    }\r\n    function setCardMul(){\r\n        setCard(getRandomElement((CARDS as Card[]).filter((card: Card) => card.kind === \"Multiplication Problems\")))\r\n    }\r\n    function setCardDiv(){\r\n        setCard(getRandomElement((CARDS as Card[]).filter((card: Card) => card.kind === \"Division Problems\")))\r\n    }\r\n    console.log(cardKind)\r\n    //setCard(getRandomElement((CARDS as Card[]).filter((card: Card) => card.kind === cardKind)))\r\n    return <Col>\r\n    <Button onClick={setRandomCard}>Random</Button>\r\n    <CardKindSelector cardKind = {cardKind} setCardKind = {setCardKind}></CardKindSelector>\r\n    </Col>\r\n    \r\n}\r\n\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CARDS from './assets/cards.json'\nimport { DisplayCard } from './components/DisplayCard';\nimport { ControlPanel } from './components/ControlPanel'\n//import { Timer } from './components/Timer'\nimport { Container, Row } from 'react-bootstrap'\nimport { Card, CardKind } from './interfaces/card';\nfunction App(): JSX.Element {\n  const [activeCard, setActiveCard] = useState<Card>(CARDS[0] as Card);\n  const [cardKind, setCardKind] = useState<CardKind>(CardKind.Addition);\n  const [answer, setAnswer] =useState<string>(\"\");\n  const [expected, setExpected] =useState<string>(\"\");\n  //const [counter, setCounter] =React.useState(60); \n \n // React.useEffect(() => {\n   // counter > 0 && setTimeout(() => setCounter(counter - 1), 1000);\n // }, [counter]);\n    \n\n  return (\n    <Container className=\"App\">\n      <Row>\n      <DisplayCard card={activeCard} setCard={setActiveCard} cardKind={cardKind}></DisplayCard>\n      </Row>\n      <Row>\n      <ControlPanel setCard={setActiveCard} cardKind={cardKind} setCardKind={setCardKind} ></ControlPanel> \n      </Row>\n      </Container>  \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}