{"version":3,"sources":["components/DisplayCard.tsx","components/ControlPanel.tsx","utilities/data.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DisplayCard","card","hintRevealed","Col","Body","Text","question","Form","Group","controlId","Label","Control","as","rows","hint","ControlPanel","setCard","reveal","Button","onClick","items","CARDS","Math","floor","random","length","App","useState","activeCard","setActiveCard","Container","className","Row","r","Error","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+pBAKO,SAASA,EAAT,GAA8F,IAAxEC,EAAuE,EAAvEA,KAAMC,EAAiE,EAAjEA,aAC/B,OAAO,cAACC,EAAA,EAAD,UACP,cAAC,IAAD,UACI,cAAC,IAAcC,KAAf,UACI,eAAC,IAAcC,KAAf,WACI,kDADJ,IAEI,oCAAOJ,EAAKK,YAEhB,eAACC,EAAA,EAAKC,MAAN,CAAYC,UAAU,eAAtB,UACA,cAACF,EAAA,EAAKG,MAAN,UAAY,6DACZ,cAACH,EAAA,EAAKI,QAAN,CAAcC,GAAG,WAAWC,KAAM,IACjCX,GAAgB,eAAC,IAAcG,KAAf,WACb,0CADa,KACWJ,EAAKa,oB,YCZtC,SAASC,EAAT,GAAoJ,IAA7HC,EAA4H,EAA5HA,QAASC,EAAmH,EAAnHA,OAAQf,EAA2G,EAA3GA,aAI3C,OAAO,eAACC,EAAA,EAAD,WACP,cAACe,EAAA,EAAD,CAAQC,QAJR,WCNI,IAA6BC,EDO7BJ,GCP6BI,EDOJC,GCNhBC,KAAKC,MAAMD,KAAKE,SAASJ,EAAMK,WDS5C,mBACA,cAACP,EAAA,EAAD,CAAQC,QAAS,kBAAMF,GAAQf,IAA/B,qB,oBEiBWwB,MAnBf,WACE,MAAoCC,mBAAeN,EAAM,IAAzD,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAgDF,oBAAkB,GAAlE,mBACA,GADA,UACkDA,oBAAkB,IAApE,mBACA,GADA,UAC4DA,oBAAkB,IAA9E,mBACA,GADA,UACgDA,oBAAkB,IAAlE,mBACA,GADA,UAC+BA,oBAAkB,IAAjD,mBAAOzB,EAAP,KACA,OADA,KAEE,cAAC4B,EAAA,EAAD,CAAWC,UAAU,MAArB,SACE,eAACC,EAAA,EAAD,WACA,cAAChC,EAAD,CAAaC,KAAM2B,EAAY1B,cAAc,IAC7C,cAACa,EAAD,CAAcC,QAASa,EAAe3B,aAAcA,EAAce,OAAQ,SAAUgB,GAChF,MAAM,IAAIC,MAAM,sCCPXC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fe5b494c.chunk.js","sourcesContent":["import { Col, Card as BootstrapCard, InputGroup, FormControl, Form, Button } from 'react-bootstrap';\r\nimport { Card } from '../interfaces/card'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\n\r\nexport function DisplayCard({card, hintRevealed}: {card: Card, hintRevealed: boolean}): JSX.Element {\r\n    return <Col>\r\n    <BootstrapCard>\r\n        <BootstrapCard.Body>\r\n            <BootstrapCard.Text>\r\n                <strong>Math Problem</strong>:\r\n                <div> {card.question}\r\n                </div> \r\n            <Form.Group controlId=\"answer-entry\">\r\n            <Form.Label><strong>Enter Correct Answer:</strong></Form.Label>\r\n            <Form.Control as=\"textarea\" rows={2} />\r\n            {hintRevealed && <BootstrapCard.Text>\r\n                <strong>Hint</strong>: {card.hint}\r\n                </BootstrapCard.Text>}\r\n            </Form.Group>\r\n            </BootstrapCard.Text>\r\n        </BootstrapCard.Body>\r\n    </BootstrapCard>\r\n    </Col>\r\n}","import { Button, Col } from 'react-bootstrap';\r\nimport { Card } from '../interfaces/card';\r\nimport CARDS from '../assets/cards.json'\r\nimport { getRandomElement } from '../utilities/data';\r\n\r\nexport function ControlPanel({setCard, reveal, hintRevealed}: {setCard: (c: Card)=>void, reveal: (r: boolean)=>void, hintRevealed: boolean}): JSX.Element {\r\n    function setRandomCard() {\r\n        setCard(getRandomElement(CARDS as Card[]))\r\n    }\r\n    return <Col>\r\n    <Button onClick={setRandomCard}>Enter</Button>\r\n    <Button onClick={() => reveal(!hintRevealed)}> int</Button>\r\n    </Col>\r\n}\r\n\r\n"," export function getRandomElement<T>(items: T[]): T {\r\n    return items[Math.floor(Math.random()*items.length)];\r\n}","import React, { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CARDS from './assets/cards.json'\nimport { DisplayCard } from './components/DisplayCard';\nimport { ControlPanel } from './components/ControlPanel'\nimport { Container, Row } from 'react-bootstrap'\nimport { Card } from './interfaces/card';\n\nfunction App(): JSX.Element {\n  const [activeCard, setActiveCard] = useState<Card>(CARDS[0] as Card);\n  const [cardKindAddition, setCardKindAddition] = useState<boolean>(false);\n  const [cardKindSubtraction, setCardSubtraction] = useState<boolean>(false);\n  const [cardKindMultiplication, setCardKindMultiplication] = useState<boolean>(false);\n  const [cardKindDivision, setCardKindDivision] = useState<boolean>(false);\n  const [hintRevealed, reveal] = useState<boolean>(false);\n  return (\n    <Container className=\"App\">\n      <Row>\n      <DisplayCard card={activeCard} hintRevealed={false}></DisplayCard>\n      <ControlPanel setCard={setActiveCard} hintRevealed={hintRevealed} reveal={function (r: boolean): void {\n          throw new Error('Function not implemented.');\n        } }></ControlPanel>\n      </Row>\n      </Container> \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}